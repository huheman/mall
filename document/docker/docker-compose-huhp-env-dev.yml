version: '3'
services:
  mongo:
    image: mongo:5.0.18 # dockerhub registry.cn-hangzhou.aliyuncs.com/huhp/mongo:5.0.18
    # image: registry.cn-hangzhou.aliyuncs.com/fastgpt/mongo:5.0.18 # 阿里云
    # image: mongo:4.4.29 # cpu不支持AVX时候使用
    container_name: mongo
    restart: always
    networks:
      - dev_net
    command: mongod --keyFile /data/mongodb.key --replSet rs0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=asd51735
    volumes:
      - mongo_v/data:/data/db
    entrypoint:
      - bash
      - -c
      - |
        openssl rand -base64 128 > /data/mongodb.key
        chmod 400 /data/mongodb.key
        chown 999:999 /data/mongodb.key
        echo 'const isInited = rs.status().ok === 1
        if(!isInited){
          rs.initiate({
              _id: "rs0",
              members: [
                  { _id: 0, host: "mongo:27017" }
              ]
          })
        }' > /data/initReplicaSet.js
        # 启动MongoDB服务
        exec docker-entrypoint.sh "$$@" &

        # 等待MongoDB服务启动
        until mongo -u root -p asd51735 --authenticationDatabase admin --eval "print('waited for connection')" > /dev/null 2>&1; do
          echo "Waiting for MongoDB to start..."
          sleep 2
        done

        # 执行初始化副本集的脚本
        mongo -u root -p asd51735 --authenticationDatabase admin /data/initReplicaSet.js

        # 等待docker-entrypoint.sh脚本执行的MongoDB服务进程
        wait $$!
  nginx:
    image: nginx  # 使用官方 Nginx 镜像 registry.cn-hangzhou.aliyuncs.com/huhp/nginx
    container_name: nginx  # 设置容器名称
    network_mode: host
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # 挂载配置文件为只读
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro
      - ./nginx/html/:/usr/share/nginx/html/:ro
    restart: always  # 设置容器总是重启
  mysql:
    image: mysql:8.0.36 # mysql:8.0.36
    container_name: mysql
    environment:
      # 这里的配置只有首次运行生效。修改后，重启镜像是不会生效的。需要把持久化数据删除再重启，才有效果
      MYSQL_ROOT_PASSWORD: asd51735
    volumes:
      - mysql_v:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"
    restart: always
    networks:
      - dev_net
  redis:
    image: redis:7
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_v/data:/data #数据文件目录挂载
    ports:
      - 6379:6379
    networks:
      - dev_net
  rabbitmq:
    image: rabbitmq:3.9.11-management
    container_name: rabbitmq
    volumes:
      - rabbitmq_v/data:/var/lib/rabbitmq #数据文件目录挂载
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - dev_net
  elasticsearch:
    image: elasticsearch:7.17.3
    container_name: elasticsearch
    environment:
      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch
      - "discovery.type=single-node" #以单一节点模式启动
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m" #设置es使用的jvm内存大小
    volumes:
      - ./es/plugins:/usr/share/elasticsearch/plugins #插件文件目录挂载
      - es_v/data:/usr/share/elasticsearch/data #数据文件目录挂载
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - dev_net
  kibana:
    image: kibana:7.17.3
    container_name: kibana
    depends_on:
      - elasticsearch #kibana在elasticsearch启动之后再启动
    environment:
      - "elasticsearch.hosts=http://elasticsearch:9200" #设置访问elasticsearch的地址
    ports:
      - 5601:5601
    networks:
      - dev_net
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001" #指定数据目录及console运行端口启动
    volumes:
      - minio_v/data:/data #数据目录挂载
    environment:
      - "MINIO_ROOT_USER=root"
      - "MINIO_ROOT_PASSWORD=asd51735"
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - dev_net
volumes:
  redis_v:
  rabbitmq_v:
  es_v:
  minio_v:
  mysql_v:
  mongo_v:
networks:
  dev_net:
    driver: bridge